<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.THrMarkResumeMapper">
  <resultMap id="BaseResultMap" type="com.example.entity.THrMarkResume">
    <!--@mbg.generated-->
    <!--@Table t_hr_mark_resume-->
    <id column="position_id" jdbcType="VARCHAR" property="positionId" />
    <result column="resume_id" jdbcType="VARCHAR" property="resumeId" />
    <result column="hr_user_id" jdbcType="VARCHAR" property="hrUserId" />
    <result column="employee_user_id" jdbcType="VARCHAR" property="employeeUserId" />
    <result column="save_flag" jdbcType="BOOLEAN" property="saveFlag" />
    <result column="resume_status" jdbcType="VARCHAR" property="resumeStatus" />
    <result column="test_scores" jdbcType="VARCHAR" property="testScores" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    position_id, resume_id, hr_user_id, employee_user_id, save_flag, resume_status, test_scores,
    create_time, update_time
  </sql>


   <resultMap id="BaseResultMap2" type="com.example.resp.ChatSessionResp">
    <id property="resumeId" column="resume_id"/>
    <id property="positionId" column="position_id"/>
    <association property="tHrMarkResume" resultMap="com.example.mapper.THrMarkResumeMapper.BaseResultMap"/>
    <association property="tUserEmployee" resultMap="com.example.mapper.TUserMapper.BaseResultEmployeeMap"/>
    <association property="tUserHr" resultMap="com.example.mapper.TUserMapper.BaseResultHrMap"/>
    <association property="imMessage" resultMap="com.example.mapper.TImMessageMapper.BaseResultMap"/>
    <association property="tCompany" resultMap="com.example.mapper.TCompanyMapper.BaseResultMap"/>
    <association property="tHr" resultMap="com.example.mapper.THrMapper.BaseResultMap2"/>
    <association property="tEmployee" resultMap="com.example.mapper.TEmployeeMapper.BaseResultMap2"/>
    <association property="tPosition" resultMap="com.example.mapper.TPositionMapper.BaseResultMap"/>
  </resultMap>


  <resultMap id="BaseResultMap3" type="com.example.resp.ResumeListResp">
    <id property="resumeId" column="resume_id"/>
    <association property="tHrMarkResume" resultMap="com.example.mapper.THrMarkResumeMapper.BaseResultMap"/>
    <association property="tUser" resultMap="com.example.mapper.TUserMapper.BaseResultMap"/>
    <association property="tResumeBaseInfo" resultMap="com.example.mapper.TResumeBaseInfoMapper.BaseResultMap"/>
    <association property="tEmployee" resultMap="com.example.mapper.TEmployeeMapper.BaseResultMap2"/>
    <collection property="works"  ofType="com.example.entity.TResumeWork"
    resultMap="com.example.mapper.TResumeWorkMapper.BaseResultMap"/>
    <collection property="educations"  ofType="com.example.entity.TResumeEducation"
    resultMap="com.example.mapper.TResumeEducationMapper.BaseResultMap"/>
    <collection property="interestJobs"  ofType="com.example.entity.TResumeInterestJob"
    resultMap="com.example.mapper.TResumeInterestJobMapper.BaseResultMap"/>
  </resultMap>

   <resultMap id="BaseResultMap4" type="com.example.resp.TalentListResp">
    <id property="resumeId" column="resume_id"/>
    <id property="positionId" column="position_id"/>
    <association property="tPosition" resultMap="com.example.mapper.TPositionMapper.BaseResultMap"/>
    <association property="tHrMarkResume" resultMap="com.example.mapper.THrMarkResumeMapper.BaseResultMap"/>
    <association property="tEmployee" resultMap="com.example.mapper.TEmployeeMapper.BaseResultMap"/>
     <collection property="educations"  ofType="com.example.entity.TResumeEducation"
    resultMap="com.example.mapper.TResumeEducationMapper.BaseResultMap"/>
  </resultMap>


  <select id="chatSessionList" resultMap="BaseResultMap2">
        select
        a.position_id,a.resume_id,a.hr_user_id,a.employee_user_id,a.update_time,
        b.user_id,b.user_type,b.message,b.create_time,
        <if test='userType == "0"'>
        d.name as hr_name,d.title,
        c.company_id,c.company_name,c.industry,c.scale,
        f.position_name,f.degree_lower_limit,f.experience_lower_limit,f.salary_lower_limit,f.salary_upper_limit,f.salary_month,f.work_place,
        g.user_type as hr_user_type,
        g.avatar as hr_avatar,
        g.account as hr_account
        </if>
        <if test='userType == "1" or userType == "2"'>
        e.name as employee_name,e.gender,e.age,e.work_experience,
        h.user_type as employee_user_type,
        h.avatar as employee_avatar,
        h.account as employee_account
        </if>
        from
        (
            select z.* from t_hr_mark_resume z
            where z.resume_status is not null
            <if test="userId != null">
                and (z.hr_user_id = #{userId} or z.employee_user_id = #{userId})
            </if>
            <if test="resumeStatus != null">
                and z.resume_status in (#{resumeStatus})
            </if>
        ) a
        left join
        (
            select m1.* from t_im_message m1
             inner join
            (
                select position_id,resume_id,max(message_index) as maxIndex from t_im_message m3
                group by position_id,resume_id
            ) m2
            on  m1.position_id = m2.position_id
            and m1.resume_id = m2.resume_id
            and m1.message_index = m2.maxIndex
        ) b
        on a.resume_id = b.resume_id and a.position_id = b.position_id
        <if test='userType == "0"'>
            inner join
            (
                select * from t_hr
                <where>
                    <if test="name != null">
                        name like concat('%',#{name},'%')
                    </if>
                </where>
            ) d
            on a.hr_user_id = d.user_id
            inner join t_user g on a.hr_user_id = g.user_id
            inner join t_company c on d.company_id = c.company_id
            inner join t_position f on a.position_id = f.position_id
        </if>
        <if test='userType == "1" or userType == "2"'>
            inner join
            (
                select *  from t_employee
                 <where>
                    <if test="name != null">
                        name like concat('%',#{name},'%')
                    </if>
                </where>
            ) e
            on a.employee_user_id = e.user_id
            inner join t_user h on a.employee_user_id = h.user_id
        </if>
        where a.resume_status is not null
  </select>

  <select id="getResumeList" resultMap="BaseResultMap3">
        select
        a.resume_id,
        b.*,
        b1.name as employee_name,b1.age,b1.gender,b1.work_experience,
        c.user_id,c.account,c.avatar,
        d.*,
        e.*,
        f.*,
        g.*
        from
        (select distinct(m1.resume_id) as resume_id from t_resume_interest_job m1 where
           EXISTS (
                    select 1 from t_position m2
                    left join t_position_toolbox m3 on m2.position_id = m3.position_id
                    where m2.position_id = #{positionId} and m2.user_id = #{hrId}
                    and m2.job_category = m1.job_category
                    <if test="degreeLowerLimit != null">
                        and
                        (
                            m2.degree_lower_limit &gt;= #{degreeLowerLimit}
                            or m3.degree_lower_limit &gt;= #{degreeLowerLimit}
                        )
                    </if>
                    <if test="experienceLowerLimit != null">
                       and m3.experience_lower_limit &gt;= #{experienceLowerLimit}
                    </if>
                    <if test="experienceUpperLimit != null">
                       and m3.experience_upper_limit &lt;= #{experienceUpperLimit}
                    </if>
                     <if test="ageLowerLimit != null">
                       and m3.age_lower_limit &gt;= #{ageLowerLimit}
                    </if>
                     <if test="ageUpperLimit != null">
                       and m3.age_upper_limit &lt;= #{ageUpperLimit}
                    </if>
                  )
           and
           NOT EXISTS (
                    select 1 from t_hr_mark_resume m3 where m3.resume_id = m1.resume_id
                    and m3.position_id = #{positionId}
                    and m3.hr_user_id = #{hrId}
                    and m3.resume_status = 1
           )
        ) a
        inner join t_resume_base_info b on a.resume_id = b.resume_id
        inner join t_employee b1 on b.user_id = b1.user_id
        inner join t_user c on b.user_id = c.user_id
        left join t_resume_work d on a.resume_id = d.resume_id
        left join t_resume_education e on a.resume_id = e.resume_id
        left join t_resume_interest_job f on a.resume_id = f.resume_id
        inner join (select * from t_hr_mark_resume where position_id = #{positionId}) g on a.resume_id = g.resume_id
  </select>

  <select id="getTalentList" resultMap="BaseResultMap4">
        select a.resume_id,a.position_id,a.*,c.*,d.*,f.* from t_hr_mark_resume a
        inner join t_resume_base_info b on a.resume_id = b.resume_id
        inner join t_employee c on b.user_id = c.user_id
        left join t_position f on a.position_id = f.position_id
        left join t_resume_education d on a.resume_id = d.resume_id
        where a.hr_user_id = #{userId}
        <if test="positionId != null">
            and a.position_id = #{positionId}
        </if>
        <if test="resumeStatus != null">
        and a.resume_status = #{resumeStatus}
        </if>
        order by a.update_time desc
  </select>
  <update id="updateTHrMarkResume">
        UPDATE t_hr_mark_resume
    <set>
        <if test="hrUserId != null">
           hr_user_id = #{hrUserId},
        </if>
        <if test="employeeUserId != null">
            employee_user_id = #{employeeUserId},
        </if>
        <if test="saveFlag != null">
            save_flag = #{saveFlag},
        </if>
        <if test="resumeStatus != null">
            resume_status = #{resumeStatus},
        </if>
        <if test="testScores != null">
            test_scores = #{testScores},
        </if>
        <if test="updateTime != null">
            update_time = #{updateTime},
        </if>
    </set>
    WHERE
        position_id = #{positionId}
        AND resume_id = #{resumeId}
  </update>
</mapper>